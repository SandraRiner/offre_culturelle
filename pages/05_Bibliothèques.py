# -*- coding: utf-8 -*-
"""
Streamlit ‚Äî Biblioth√®ques
"""

import os
import pandas as pd
import streamlit as st
import folium
from folium.plugins import MarkerCluster
from streamlit_folium import st_folium
import matplotlib.pyplot as plt
import numpy as np

# --- Configuration de la page ---
st.set_page_config(
    page_title="Biblioth√®ques",
    page_icon="üìä",
    layout="wide"
)

# --- Titre centr√© ---
st.markdown("<h1 style='text-align: center;'>üìä Biblioth√®ques</h1>", unsafe_allow_html=True)
st.markdown("<p style='text-align: center;'>Analyse et datavisualisation de l'offre culturelle en France</p>", unsafe_allow_html=True)

# --- Chargement des donn√©es ---
biblio_file = pd.read_csv("/home/karim/code/offre_culturelle/data/adresses_des_bibliotheques_publiques_prepared.csv", sep=',')
population_file = pd.read_csv("/home/karim/code/offre_culturelle/data/population-france-par-dept.csv", sep=';')

# Nettoyer les noms de colonnes pour √©viter les KeyError
population_file.columns = population_file.columns.str.strip()

# ------------------------------------
# KPIS
# ------------------------------------
total_biblio = len(biblio_file)  # nombre total de lignes
nb_regions = biblio_file['R√©gion'].nunique()  # nombre de r√©gions uniques
moyenne_biblio = total_biblio / nb_regions  # moyenne par r√©gion

# --- Style CSS pour les cartes KPI ---
st.markdown("""
    <style>
    /* Conteneur des KPIs */
    [data-testid="stMetric"] {
        background-color: #f9f9f9;
        border: 1px solid #ddd;
        padding: 15px;
        border-radius: 10px;
        text-align: center;
        box-shadow: 1px 1px 3px rgba(0,0,0,0.05);
    }
    /* Label */
    [data-testid="stMetric"] label {
        font-size: 14px !important;
        color: #555;
    }
    /* Valeur */
    [data-testid="stMetric"] div {
        font-size: 24px !important;
        font-weight: bold;
        color: #222;
    }
    /* Zone de texte */
    .commentary-box {
        background-color: #f8f9fa;
        border-left: 4px solid #007ACC;
        padding: 15px;
        margin: 20px 0;
        border-radius: 5px;
        font-style: italic;
        color: #555;
    }
    </style>
""", unsafe_allow_html=True)

# --- Affichage en 3 colonnes ---
col1, col2, col3 = st.columns(3)

with col1:
    st.metric(label="‚ûï Total Biblioth√®ques", value=f"{total_biblio:,}".replace(",", " "))

with col2:
    st.metric(label="üåç Nombre de R√©gions", value=f"{nb_regions}")

with col3:
    st.metric(label="‚ûó Moyenne par R√©gion", value=f"{moyenne_biblio:.2f}")

st.divider()

# ------------------------------------
# Palette couleur globale
# ------------------------------------
pastel_colors = [
    
    "#312E60","#4D2A6C","#692678","#852284","#A01E90","#BC1A9C",
    "#D816A8","#F412B4","#FF1DA8","#FF339C","#FF4A90","#FF6084",
    "#FF7678","#FF8D6C","#FF0066"
]

st.divider()

# ------------------------------------
# 1. Nombre de biblioth√®ques par r√©gion
# ------------------------------------

st.subheader("1. üî¢ Nombre de biblioth√®ques par r√©gion")

# Comptage par r√©gion
region_counts = biblio_file['R√©gion'].value_counts().reset_index()
region_counts.columns = ['R√©gion', 'Nombre']

# Cr√©ation du graphique
fig, ax = plt.subplots(figsize=(10, 5))
plt.subplots_adjust(bottom=0.2, left=0.08, right=0.95)

# Barplot
bars = ax.bar(
    region_counts['R√©gion'],
    region_counts['Nombre'],
    color=pastel_colors,
    edgecolor='black'
)

# Ajouter les valeurs au-dessus
for bar in bars:
    height = bar.get_height()
    ax.annotate(
        f'{int(height)}',
        xy=(bar.get_x() + bar.get_width() / 2, height),
        xytext=(0, 3),
        textcoords="offset points",
        ha='center', va='bottom',
        fontsize=9
    )

# Personnalisation
ax.set_xlabel("R√©gions", fontsize=12, fontweight='bold')
ax.set_ylabel("Nombre de biblioth√®ques", fontsize=12, fontweight='bold')
ax.tick_params(axis='x', rotation=45, labelsize=10)
ax.spines['top'].set_visible(False)
ax.spines['right'].set_visible(False)

# Affichage centr√©
col1, col2, col3 = st.columns([1, 8, 1])
with col2:
    st.pyplot(fig)

# Zone de texte commentaire
st.markdown("""
<div class="commentary-box">
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. 
Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. 
Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.
</div>
""", unsafe_allow_html=True)

st.divider()

# ------------------------------------
# 2. Comparatif r√©gional population et biblioth√®ques
# ------------------------------------

st.subheader("2. üë• Comparatif r√©gional de la population et du nombre de biblioth√®ques")

# Comptage biblioth√®ques par r√©gion
region_counts = biblio_file['R√©gion'].value_counts().reset_index()
region_counts.columns = ['R√©gion', 'Nombre']

# Agr√©gation population par r√©gion
pop_counts = population_file.groupby('nom_region', as_index=False)['Total'].sum()

# Fusion sur le nom de r√©gion
df_merge = pd.merge(region_counts, pop_counts, left_on='R√©gion', right_on='nom_region', how='inner')

# Cr√©ation du graphique avec deux axes Y
fig, ax1 = plt.subplots(figsize=(10, 5))
plt.subplots_adjust(bottom=0.2, left=0.08, right=0.88, top=0.9)

# Barres ‚Üí Nombre de biblioth√®ques
bars = ax1.bar(
    df_merge['R√©gion'],
    df_merge['Nombre'],
    color=pastel_colors,
    edgecolor='black'
)
ax1.set_xlabel("R√©gions", fontsize=12, fontweight='bold')
ax1.set_ylabel("Nombre de biblioth√®ques", fontsize=12, fontweight='bold')
ax1.tick_params(axis='x', rotation=45, labelsize=10)

# Ajouter valeurs sur les barres
for bar in bars:
    height = bar.get_height()
    ax1.annotate(
        f'{int(height)}',
        xy=(bar.get_x() + bar.get_width() / 2, height),
        xytext=(0, 3),
        textcoords="offset points",
        ha='center', va='bottom',
        fontsize=9
    )

# Deuxi√®me axe Y pour la population (en millions)
ax2 = ax1.twinx()
ax2.plot(
    df_merge['R√©gion'],
    df_merge['Total'].astype(int) / 1_000_000,  # Conversion en millions
    color='red',
    marker='o',
    linestyle='-',
    linewidth=2,
    markersize=6
)
ax2.set_ylabel("Population (millions)", fontsize=12, fontweight='bold')

# L√©gendes
ax1.legend(['Biblioth√®ques'], loc='upper left', bbox_to_anchor=(0, 0.95), fontsize=10)
ax2.legend(['Population (M)'], loc='upper right', bbox_to_anchor=(1, 0.95), fontsize=10)

# Supprimer les bordures inutiles
ax1.spines['top'].set_visible(False)
ax2.spines['top'].set_visible(False)

# Affichage centr√©
col1, col2, col3 = st.columns([1, 8, 1])
with col2:
    st.pyplot(fig)

# Zone de texte commentaire
st.markdown("""
<div class="commentary-box">
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris congue vehicula nisi, eu tincidunt magna fermentum sit amet. 
Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia curae; Pellentesque habitant morbi tristique 
senectus et netus et malesuada fames ac turpis egestas.
</div>
""", unsafe_allow_html=True)

st.divider()

# ------------------------------------
# 3. Nombre total d'entr√©es par r√©gion
# ------------------------------------

st.subheader("3. üéüÔ∏è Nombre total d'entr√©es par r√©gion (en millions)")

# Filtrer et forcer en entier
biblio_entries = biblio_file.dropna(subset=['nombre_d_entrees'])
biblio_entries['nombre_d_entrees'] = biblio_entries['nombre_d_entrees'].fillna(0).astype(int)

# Compter combien de lignes restent apr√®s suppression des vides
nb_lignes_utilisees = len(biblio_entries)

# Agr√©ger le nombre total d'entr√©es par r√©gion
region_entries = biblio_entries.groupby('R√©gion', as_index=False)['nombre_d_entrees'].sum()

# Cr√©ation du graphique
fig, ax = plt.subplots(figsize=(10, 5))
plt.subplots_adjust(bottom=0.2, left=0.08, right=0.95)

# Conversion en millions pour l'affichage
bars = ax.bar(
    region_entries['R√©gion'],
    region_entries['nombre_d_entrees'] / 1_000_000,  # √âchelle en millions
    color=pastel_colors,
    edgecolor='black'
)

# Ajouter les valeurs au-dessus des barres (arrondies √† 1 d√©cimale)
for bar in bars:
    height = bar.get_height()
    ax.annotate(
        f'{height:.1f} M',
        xy=(bar.get_x() + bar.get_width() / 2, height),
        xytext=(0, 3),
        textcoords="offset points",
        ha='center', va='bottom',
        fontsize=9
    )

# Personnalisation
ax.set_xlabel("R√©gions", fontsize=12, fontweight='bold')
ax.set_ylabel("Nombre total d'entr√©es (millions)", fontsize=12, fontweight='bold')
ax.tick_params(axis='x', rotation=45, labelsize=10)
ax.spines['top'].set_visible(False)
ax.spines['right'].set_visible(False)

# Affichage centr√©
col1, col2, col3 = st.columns([1, 8, 1])
with col2:
    st.pyplot(fig)

st.caption(f"Calcul r√©alis√© sur {nb_lignes_utilisees} lignes avec valeurs renseign√©es dans 'nombre_d_entrees', au lieu des {len(biblio_file)} lignes initiales.")

# Zone de texte commentaire
st.markdown("""
<div class="commentary-box">
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam in dui mauris. Vivamus hendrerit arcu sed erat molestie vehicula. 
Sed auctor neque eu tellus rhoncus ut eleifend nibh porttitor. Ut in nulla enim. Phasellus molestie magna non est bibendum non 
venenatis nisl tempor. Suspendisse dictum feugiat nisl ut dapibus.
</div>
""", unsafe_allow_html=True)

st.divider()

# ------------------------------------
# 4. Nombre total d'entr√©es par r√©gion + population
# ------------------------------------

st.subheader("4. üéüÔ∏è Nombre total d'entr√©es par r√©gion + population")

# Filtrer et forcer en entier
biblio_entries = biblio_file.dropna(subset=['nombre_d_entrees'])
biblio_entries['nombre_d_entrees'] = biblio_entries['nombre_d_entrees'].fillna(0).astype(int)

# Compter combien de lignes restent apr√®s suppression des vides
nb_lignes_utilisees = len(biblio_entries)

# Agr√©ger le nombre total d'entr√©es par r√©gion
region_entries = biblio_entries.groupby('R√©gion', as_index=False)['nombre_d_entrees'].sum()

# Agr√©gation population par r√©gion
pop_counts = population_file.groupby('nom_region', as_index=False)['Total'].sum()

# Fusion des deux datasets
df_merge = pd.merge(region_entries, pop_counts, left_on='R√©gion', right_on='nom_region', how='inner')

# Cr√©ation du graphique avec deux axes Y
fig, ax1 = plt.subplots(figsize=(10, 5))
plt.subplots_adjust(bottom=0.2, left=0.08, right=0.88, top=0.9)

# Barres ‚Üí Nombre d'entr√©es (en millions)
bars = ax1.bar(
    df_merge['R√©gion'],
    df_merge['nombre_d_entrees'] / 1_000_000,  # √âchelle millions
    color=pastel_colors,
    edgecolor='black'
)
ax1.set_xlabel("R√©gions", fontsize=12, fontweight='bold')
ax1.set_ylabel("Nombre d'entr√©es (millions)", fontsize=12, fontweight='bold')
ax1.tick_params(axis='x', rotation=45, labelsize=10)

# Ajouter valeurs sur les barres
for bar in bars:
    height = bar.get_height()
    ax1.annotate(
        f'{height:.1f} M',
        xy=(bar.get_x() + bar.get_width() / 2, height),
        xytext=(0, 3),
        textcoords="offset points",
        ha='center', va='bottom',
        fontsize=9
    )

# Deuxi√®me axe Y ‚Üí Population en millions
ax2 = ax1.twinx()
ax2.plot(
    df_merge['R√©gion'],
    df_merge['Total'] / 1_000_000,  # √âchelle millions
    color='red',
    marker='o',
    linestyle='-',
    linewidth=2,
    markersize=6
)
ax2.set_ylabel("Population (millions)", fontsize=12, fontweight='bold')

# L√©gendes
ax1.legend(['Entr√©es (M)'], loc='upper left', bbox_to_anchor=(0, 0.95), fontsize=10)
ax2.legend(['Population (M)'], loc='upper right', bbox_to_anchor=(1, 0.95), fontsize=10)

# Supprimer bordures inutiles
ax1.spines['top'].set_visible(False)
ax2.spines['top'].set_visible(False)

# Affichage centr√©
col1, col2, col3 = st.columns([1, 8, 1])
with col2:
    st.pyplot(fig)

st.caption(f"Calcul r√©alis√© sur {nb_lignes_utilisees} lignes avec valeurs renseign√©es dans 'nombre_d_entrees', au lieu des {len(biblio_file)} lignes initiales.")

# Zone de texte commentaire
st.markdown("""
<div class="commentary-box">
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed non risus. Suspendisse lectus tortor, dignissim sit amet, 
adipiscing nec, ultricies sed, dolor. Cras elementum ultrices diam. Maecenas ligula massa, varius a, semper congue, 
euismod non, mi. Proin porttitor, orci nec nonummy molestie, enim est eleifend mi.
</div>
""", unsafe_allow_html=True)

st.divider()

# ------------------------------------
# 5. Biblioth√®ques + Population et Entr√©es par r√©gion
# ------------------------------------

st.subheader("5. üìä Biblioth√®ques + Population et Entr√©es (en millions) par r√©gion")

# Filtrer et forcer en entier pour les entr√©es
biblio_entries = biblio_file.dropna(subset=['nombre_d_entrees'])
biblio_entries['nombre_d_entrees'] = biblio_entries['nombre_d_entrees'].fillna(0).astype(int)

# Compter combien de lignes restent apr√®s suppression des vides
nb_lignes_utilisees = len(biblio_entries)

# Agr√©ger le nombre total d'entr√©es par r√©gion
region_entries = biblio_entries.groupby('R√©gion', as_index=False)['nombre_d_entrees'].sum()

# Nombre de biblioth√®ques par r√©gion
region_biblio_count = biblio_file.groupby('R√©gion', as_index=False).size()
region_biblio_count.columns = ['R√©gion', 'nb_bibliotheques']

# Agr√©gation population par r√©gion
pop_counts = population_file.groupby('nom_region', as_index=False)['Total'].sum()

# Fusion des trois datasets
df_merge = (
    region_biblio_count
    .merge(region_entries, on='R√©gion', how='inner')
    .merge(pop_counts, left_on='R√©gion', right_on='nom_region', how='inner')
)

# Cr√©ation du graphique avec deux axes Y
fig, ax1 = plt.subplots(figsize=(11, 5))
plt.subplots_adjust(bottom=0.2, left=0.08, right=0.88, top=0.9)

x = np.arange(len(df_merge['R√©gion']))

# Barres ‚Üí Nombre de biblioth√®ques
bars_biblio = ax1.bar(
    x,
    df_merge['nb_bibliotheques'],
    color=pastel_colors,
    edgecolor='black'
)

ax1.set_xlabel("R√©gions", fontsize=12, fontweight='bold')
ax1.set_ylabel("Nombre de biblioth√®ques", fontsize=12, fontweight='bold')
ax1.set_xticks(x)
ax1.set_xticklabels(df_merge['R√©gion'], rotation=45, fontsize=10)

# Ajouter valeurs au-dessus des barres
for bar in bars_biblio:
    ax1.annotate(f'{int(bar.get_height())}',
                 xy=(bar.get_x() + bar.get_width()/2, bar.get_height()),
                 xytext=(0, 3), textcoords="offset points",
                 ha='center', va='bottom', fontsize=9)

# Axe Y droite ‚Üí Population et entr√©es en millions
ax2 = ax1.twinx()

# Ligne bleue ‚Üí Entr√©es (millions)
ax2.plot(
    x,
    df_merge['nombre_d_entrees'] / 1_000_000,
    color='blue',
    marker='o',
    linestyle='-',
    linewidth=2,
    markersize=6
)

# Ligne rouge ‚Üí Population (millions)
ax2.plot(
    x,
    df_merge['Total'] / 1_000_000,
    color='red',
    marker='s',
    linestyle='-',
    linewidth=2,
    markersize=5
)

ax2.set_ylabel("Valeurs en millions", fontsize=12, fontweight='bold')

# L√©gendes
ax1.legend(['Biblioth√®ques'], loc='upper left', bbox_to_anchor=(0, 0.95), fontsize=10)
ax2.legend(['Entr√©es (M)', 'Population (M)'], loc='upper right', bbox_to_anchor=(1, 0.95), fontsize=10)

# Supprimer bordures inutiles
ax1.spines['top'].set_visible(False)
ax2.spines['top'].set_visible(False)

# Affichage centr√©
col1, col2, col3 = st.columns([0.5, 9, 0.5])
with col2:
    st.pyplot(fig)

st.caption(f"Calcul r√©alis√© sur {nb_lignes_utilisees} lignes avec valeurs renseign√©es dans 'nombre_d_entrees', au lieu des {len(biblio_file)} lignes initiales.")

# Zone de texte commentaire
st.markdown("""
<div class="commentary-box">
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer nec odio. Praesent libero. Sed cursus ante dapibus diam. 
Sed nisi. Nulla quis sem at nibh elementum imperdiet. Duis sagittis ipsum. Praesent mauris. Fusce nec tellus sed augue 
semper porta. Mauris massa. Vestibulum lacinia arcu eget nulla.
</div>
""", unsafe_allow_html=True)

st.divider()

# ------------------------------------
# 6. üìÖ Ouvertes / Ferm√©es le dimanche : Nombre + Entr√©es (millions)
# ------------------------------------

# On reprend la normalisation de la colonne
df_dimanche_detail = biblio_file[['R√©gion', 'ouverture_le_dimanche', 'nombre_d_entrees']].copy()
df_dimanche_detail['ouverture_le_dimanche'] = (
    df_dimanche_detail['ouverture_le_dimanche']
    .astype(str).str.strip().str.lower()
    .replace({'nan': np.nan})
    .replace({'oui': 'Oui', 'true': 'Oui', '1': 'Oui', 'o': 'Oui',
              'non': 'Non', 'false': 'Non', '0': 'Non', 'n': 'Non'})
)
df_dimanche_detail['nombre_d_entrees'] = pd.to_numeric(
    df_dimanche_detail['nombre_d_entrees'], errors='coerce'
).fillna(0).astype(int)

# Ordre et palette
region_order = sorted(biblio_file['R√©gion'].dropna().unique())
color_map = dict(zip(region_order, pastel_colors))
colors_ordered = [color_map[r] for r in region_order]

def plot_dimanche_vs_entrees(title, df_filtered):
    # Comptage biblioth√®ques
    total_bib = df_filtered.groupby('R√©gion').size().reindex(region_order, fill_value=0)
    # Total entr√©es
    total_entrees = df_filtered.groupby('R√©gion')['nombre_d_entrees'].sum().reindex(region_order, fill_value=0)

    fig, ax_left = plt.subplots(figsize=(10, 5))
    plt.subplots_adjust(bottom=0.2, left=0.08, right=0.88)

    # Barres : nombre de biblioth√®ques
    bars = ax_left.bar(region_order, total_bib.values,
                       color=colors_ordered, edgecolor='black', label="Nombre de biblioth√®ques")
    ax_left.set_xlabel("R√©gions", fontsize=12, fontweight='bold')
    ax_left.set_ylabel("Nombre de biblioth√®ques", fontsize=12, fontweight='bold')
    ax_left.tick_params(axis='x', rotation=45, labelsize=10)

    # Valeurs sur barres
    for b in bars:
        ax_left.annotate(f"{int(b.get_height())}",
                         (b.get_x() + b.get_width()/2, b.get_height()),
                         textcoords="offset points", xytext=(0,3),
                         ha="center", va="bottom", fontsize=8)

    # Ligne : entr√©es en millions
    ax_right = ax_left.twinx()
    ax_right.plot(region_order, total_entrees / 1_000_000,
                  color='blue', marker='o', linewidth=1.5, label="Entr√©es (millions)")
    ax_right.set_ylabel("Entr√©es (millions)", fontsize=12, fontweight='bold')

    # L√©gendes
    ax_left.legend(loc='upper left', fontsize=9)
    ax_right.legend(loc='upper right', fontsize=9)

    # Style
    ax_left.spines['top'].set_visible(False)
    ax_right.spines['top'].set_visible(False)

    # Affichage Streamlit
    st.subheader(title)
    col1, col2, col3 = st.columns([1, 8, 1])
    with col2:
        st.pyplot(fig)

# Graphique A : ouvertes le dimanche
df_open = df_dimanche_detail[df_dimanche_detail['ouverture_le_dimanche'] == 'Oui']
plot_dimanche_vs_entrees("üìÖ 7. Biblioth√®ques ouvertes le dimanche : nombre vs entr√©es", df_open)

st.caption(f"Calcul r√©alis√© sur {nb_lignes_utilisees} lignes avec valeurs renseign√©es dans 'nombre_d_entrees', au lieu des {len(biblio_file)} lignes initiales.")

# Zone de texte commentaire
st.markdown("""
<div class="commentary-box">
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer nec odio. Praesent libero. Sed cursus ante dapibus diam. 
Sed nisi. Nulla quis sem at nibh elementum imperdiet. Duis sagittis ipsum. Praesent mauris. Fusce nec tellus sed augue 
semper porta. Mauris massa. Vestibulum lacinia arcu eget nulla.
</div>
""", unsafe_allow_html=True)

st.divider()

# Graphique B : ferm√©es le dimanche
df_closed = df_dimanche_detail[df_dimanche_detail['ouverture_le_dimanche'] == 'Non']
plot_dimanche_vs_entrees("üìÖ 8. Biblioth√®ques ferm√©es le dimanche : nombre vs entr√©es", df_closed)

st.caption(f"Calcul r√©alis√© sur {nb_lignes_utilisees} lignes avec valeurs renseign√©es dans 'nombre_d_entrees', au lieu des {len(biblio_file)} lignes initiales.")

# Zone de texte commentaire
st.markdown("""
<div class="commentary-box">
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer nec odio. Praesent libero. Sed cursus ante dapibus diam. 
Sed nisi. Nulla quis sem at nibh elementum imperdiet. Duis sagittis ipsum. Praesent mauris. Fusce nec tellus sed augue 
semper porta. Mauris massa. Vestibulum lacinia arcu eget nulla.
</div>
""", unsafe_allow_html=True)

st.divider()