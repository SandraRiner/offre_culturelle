# -*- coding: utf-8 -*-
"""
Streamlit ‚Äî Biblioth√®ques
"""

import pandas as pd
import streamlit as st
import matplotlib.pyplot as plt
import numpy as np
import plotly.express as px

# ------------------------------------
# Configuration de la page
# ------------------------------------
st.set_page_config(
    page_title="Biblioth√®ques",
    page_icon="üìä",
    layout="wide"
)

# ------------------------------------
# Titre principal
# ------------------------------------
st.markdown(
    """
    <h1 style="text-align:center; margin-bottom: 0.3rem;">Biblioth√®ques de France üìä</h1>
    <p style="text-align:center; font-size:1.1rem; color:#555;">
        Analyse et datavisualisation
    </p>
    """,
    unsafe_allow_html=True
)

# ------------------------------------
# Donn√©es
# ------------------------------------
biblio_file = pd.read_csv(
    "data_prod/adresses_des_bibliotheques_publiques_prepared.csv", sep=','
)
population_file = pd.read_csv(
    "data_prod/population-france-par-dept.csv", sep=';'
)
population_file.columns = population_file.columns.str.strip()  # √©viter les espaces

# ------------------------------------
# Palette et l√©gende des r√©gions
# ------------------------------------
pastel_colors = [
    "#312E60","#4D2A6C","#692678","#852284","#A01E90","#BC1A9C",
    "#D816A8","#F412B4","#FF1DA8","#FF339C","#FF4A90","#FF6084",
    "#FF7678","#FF8D6C","#FF0066"
]

region_labels = {
    "ARA": "Auvergne-Rh√¥ne-Alpes",
    "BFC": "Bourgogne-Franche-Comt√©",
    "BRE": "Bretagne",
    "CVL": "Centre-Val de Loire",
    "DROM": "D√©partements & R√©gions d'Outre-Mer",
    "GES": "Grand Est",
    "HDF": "Hauts-de-France",
    "IDF": "√éle-de-France",
    "NAQ": "Nouvelle-Aquitaine",
    "NOR": "Normandie",
    "OCC": "Occitanie",
    "PACA": "Provence-Alpes-C√¥te d'Azur",
    "PDL": "Pays de la Loire",
}

# Filtrer uniquement les r√©gions pr√©sentes dans la l√©gende
region_order = [r for r in sorted(biblio_file['R√©gion'].dropna().unique()) if r in region_labels]

# Map couleurs coh√©rentes
color_map = {r: pastel_colors[i % len(pastel_colors)] for i, r in enumerate(region_order)}

# ------------------------------------
# KPIS
# ------------------------------------
total_biblio = len(biblio_file)                     # nombre total de lignes
nb_regions = biblio_file['R√©gion'].nunique()        # nombre de r√©gions uniques
moyenne_biblio = total_biblio // nb_regions         # moyenne par r√©gion (entier)

# --- Style CSS pour les cartes KPI ---
st.markdown("""
    <style>
    [data-testid="stMetric"] {
        background-color: #f9f9f9;
        border: 1px solid #ddd;
        padding: 15px;
        border-radius: 10px;
        text-align: center;
        box-shadow: 1px 1px 3px rgba(0,0,0,0.05);
    }
    [data-testid="stMetric"] label {
        font-size: 14px !important;
        color: #555;
    }
    [data-testid="stMetric"] div {
        font-size: 24px !important;
        font-weight: bold;
        color: #222;
    }
    .commentary-box {
        background-color: #f8f9fa;
        border-left: 4px solid #007ACC;
        padding: 15px;
        margin: 20px 0;
        border-radius: 5px;
        font-style: italic;
        color: #555;
    }
    </style>
""", unsafe_allow_html=True)

# --- Affichage en 3 colonnes ---
col1, col2, col3 = st.columns(3)
with col1:
    st.metric(label="‚ûï Total Biblioth√®ques", value=f"{total_biblio:,}".replace(",", " "))
with col2:
    st.metric(label="üåç Nombre de R√©gions", value=f"{nb_regions}")
with col3:
    st.metric(label="‚ûó Moyenne par R√©gion", value=f"{moyenne_biblio}")

st.divider()

# ------------------------------------
# L√©gende des abr√©viations de r√©gions
# ------------------------------------
st.markdown("### üìç L√©gende des abr√©viations des r√©gions")

# Cr√©ation du texte de l√©gende de fa√ßon propre et lisible
legend_text = " ‚Ä¢ ".join([f"**{abbr}** = {nom}" for abbr, nom in region_labels.items()])
st.markdown(legend_text)

st.divider()

# ------------------------------------
# 1. Carte des biblioth√®ques par r√©gion
# ------------------------------------
st.subheader("1. üß≠ Carte des biblioth√®ques en France par r√©gion")

# Utiliser le fichier d√©j√† charg√© + filtrer les coordonn√©es manquantes
df_map = biblio_file.dropna(subset=['Latitude', 'Longitude']).copy()

# Couleurs par r√©gion (adapt√©es au nombre r√©el)
regions_unique = df_map['R√©gion'].unique().tolist()
color_map = {r: c for r, c in zip(regions_unique, pastel_colors[:len(regions_unique)])}

fig1 = px.scatter_mapbox(
    df_map,
    lat='Latitude',
    lon='Longitude',
    color='R√©gion',
    color_discrete_map=color_map,
    hover_name='Code_bib',
    title="Biblioth√®ques en France par r√©gion"
)
fig1.update_layout(
    mapbox_style="open-street-map",
    mapbox_center_lat=46.2,
    mapbox_center_lon=2.2,
    mapbox_zoom=4.8,
    height=800
)
st.plotly_chart(fig1)

st.divider()

# ------------------------------------
# 2. Nombre de biblioth√®ques par r√©gion (ordre alphab√©tique)
# ------------------------------------
st.subheader("2. üî¢ Nombre de biblioth√®ques par r√©gion")

region_counts = (
    biblio_file
    .groupby('R√©gion', as_index=False)
    .size()
    .rename(columns={'size': 'Nombre'})
)

fig, ax = plt.subplots(figsize=(10, 5))
bars = ax.bar(
    region_counts['R√©gion'],
    region_counts['Nombre'],
    color=pastel_colors[:len(region_counts)],
    edgecolor='black'
)

for bar in bars:
    height = bar.get_height()
    ax.annotate(f'{int(height)}',
                xy=(bar.get_x() + bar.get_width()/2, height),
                xytext=(0, 3), textcoords="offset points",
                ha='center', va='bottom', fontsize=9)

ax.set_xlabel("R√©gions", fontsize=12, fontweight='bold')
ax.set_ylabel("Nombre de biblioth√®ques", fontsize=12, fontweight='bold')
ax.tick_params(axis='x', rotation=45, labelsize=10)
ax.spines['top'].set_visible(False)
ax.spines['right'].set_visible(False)

col1, col2, col3 = st.columns([1, 8, 1])
with col2:
    st.pyplot(fig)

st.markdown("""
<div class="commentary-box">
Le nombre de biblioth√®ques varie fortement selon les r√©gions fran√ßaises. L'Auvergne-Rh√¥ne-Alpes se distingue avec plus de 2 600 √©tablissements, suivie par l'Occitanie (~1 990) et la Nouvelle-Aquitaine (~1 850).
√Ä l'inverse, les DROM (~270) et la Normandie (~700) pr√©sentent les effectifs les plus faibles.
La majorit√© des autres r√©gions comptent entre 700 et 1 300 biblioth√®ques.
</div>
""", unsafe_allow_html=True)

st.divider()

# ------------------------------------
# 3. Comparatif r√©gional population et biblioth√®ques
# ------------------------------------
st.subheader("3. üë• Comparatif r√©gional de la population et du nombre de biblioth√®ques")

# Comptage biblioth√®ques par r√©gion (alphab√©tique)
region_counts = (
    biblio_file['R√©gion'].value_counts()
    .rename_axis('R√©gion')
    .reset_index(name='Nombre')
    .sort_values('R√©gion')
    .reset_index(drop=True)
)

# Agr√©gation population par r√©gion
pop_counts = population_file.groupby('nom_region', as_index=False)['Total'].sum()

# Fusion
df_merge = pd.merge(region_counts, pop_counts, left_on='R√©gion', right_on='nom_region', how='inner')

# Graphique 2 axes
fig, ax1 = plt.subplots(figsize=(10, 5))
bars = ax1.bar(
    df_merge['R√©gion'], df_merge['Nombre'],
    color=pastel_colors[:len(df_merge)], edgecolor='black'
)
ax1.set_xlabel("R√©gions", fontsize=12, fontweight='bold')
ax1.set_ylabel("Nombre de biblioth√®ques", fontsize=12, fontweight='bold')
ax1.tick_params(axis='x', rotation=45, labelsize=10)

for bar in bars:
    height = bar.get_height()
    ax1.annotate(f'{int(height)}',
                 xy=(bar.get_x() + bar.get_width()/2, height),
                 xytext=(0, 3), textcoords="offset points",
                 ha='center', va='bottom', fontsize=9)

ax2 = ax1.twinx()
ax2.plot(
    df_merge['R√©gion'], df_merge['Total'].astype(int) / 1_000_000,
    color='red', marker='o', linestyle='-', linewidth=2, markersize=6
)
ax2.set_ylabel("Population (millions)", fontsize=12, fontweight='bold')

ax1.legend(['Biblioth√®ques'], loc='upper left', fontsize=10)
ax2.legend(['Population (M)'], loc='upper right', fontsize=10)

ax1.spines['top'].set_visible(False)
ax2.spines['top'].set_visible(False)

col1, col2, col3 = st.columns([1, 8, 1])
with col2:
    st.pyplot(fig)

st.markdown("""
<div class="commentary-box">
Certaines r√©gions allient forte population et large r√©seau de biblioth√®ques (Auvergne-Rh√¥ne-Alpes, Occitanie, Nouvelle-Aquitaine).
D'autres, comme l'√éle-de-France, ont une population importante mais relativement peu de biblioth√®ques.
</div>
""", unsafe_allow_html=True)

# ------------------------------------
# Scatter plot : Population vs Biblioth√®ques
# ------------------------------------
df_merge['Densit√© (pour 100k)'] = (df_merge['Nombre'] / df_merge['Total']) * 100_000

fig_scatter, ax = plt.subplots(figsize=(8, 6))
colors_scatter = pastel_colors[:len(df_merge)]
sizes = (df_merge['Densit√© (pour 100k)'] * 10).clip(lower=30, upper=400)  # tailles lisibles

ax.scatter(
    df_merge['Total'] / 1_000_000,  # Population en millions
    df_merge['Nombre'],
    color=colors_scatter,
    edgecolor='black',
    s=sizes,
    alpha=0.85
)

# Droite de r√©gression
x_vals = df_merge['Total'] / 1_000_000
y_vals = df_merge['Nombre']
m, b = np.polyfit(x_vals, y_vals, 1)
ax.plot(x_vals, m * x_vals + b, color='gray', linestyle='--', linewidth=1.5, label='Tendance')

# Labels
for _, row in df_merge.iterrows():
    ax.text(row['Total'] / 1_000_000, row['Nombre'] + 30, row['R√©gion'], fontsize=8, ha='center')

ax.set_xlabel("Population (millions)", fontsize=12, fontweight='bold')
ax.set_ylabel("Nombre de biblioth√®ques", fontsize=12, fontweight='bold')
ax.legend()
ax.spines['top'].set_visible(False)
ax.spines['right'].set_visible(False)

col1, col2, col3 = st.columns([1, 8, 1])
with col2:
    st.pyplot(fig_scatter)

st.markdown("""
<div class="commentary-box">
Les r√©gions au-dessus de la droite de tendance sont mieux dot√©es que la moyenne pour leur population ; √† l'inverse, celles en dessous le sont moins.
</div>
""", unsafe_allow_html=True)

st.divider()

# ------------------------------------
# 4. Nombre total d'entr√©es par r√©gion
# ------------------------------------
st.subheader("4. üéüÔ∏è Nombre total d'entr√©es par r√©gion (en millions)")

# 1) P√©rim√®tre commun : uniquement les lignes avec une valeur d'entr√©es
biblio_entries = biblio_file.copy()
biblio_entries['nombre_d_entrees'] = pd.to_numeric(
    biblio_entries['nombre_d_entrees'], errors='coerce'
)
biblio_entries = biblio_entries.dropna(subset=['nombre_d_entrees'])
biblio_entries['nombre_d_entrees'] = biblio_entries['nombre_d_entrees'].astype(int)
nb_lignes_utilisees = len(biblio_entries)

# 2) Agr√©gation sur ce p√©rim√®tre (tri alphab√©tique pour coh√©rence visuelle)
region_entries = (
    biblio_entries
    .groupby('R√©gion', as_index=False)['nombre_d_entrees']
    .sum()
    .sort_values('R√©gion')
    .reset_index(drop=True)
)

# 3) Graphique
fig, ax = plt.subplots(figsize=(10, 5))
bars = ax.bar(
    region_entries['R√©gion'],
    region_entries['nombre_d_entrees'] / 1_000_000,  # millions
    color=pastel_colors[:len(region_entries)],
    edgecolor='black'
)

# Labels au-dessus des barres
for bar in bars:
    height = bar.get_height()
    ax.annotate(f'{height:.1f} M',
                xy=(bar.get_x() + bar.get_width() / 2, height),
                xytext=(0, 3), textcoords="offset points",
                ha='center', va='bottom', fontsize=9)

# Mise en forme
ax.set_xlabel("R√©gions", fontsize=12, fontweight='bold')
ax.set_ylabel("Nombre total d'entr√©es (millions)", fontsize=12, fontweight='bold')
ax.tick_params(axis='x', rotation=45, labelsize=10)
ax.spines['top'].set_visible(False)
ax.spines['right'].set_visible(False)

# Affichage centr√©
col1, col2, col3 = st.columns([1, 8, 1])
with col2:
    st.pyplot(fig)

st.caption(
    f"Calcul r√©alis√© sur {nb_lignes_utilisees} lignes avec valeurs renseign√©es dans 'nombre_d_entrees' "
    f"(sur {len(biblio_file)} lignes initiales)."
)

st.markdown("""
<div class="commentary-box">
L'Ile de France domine largement la fr√©quentation avec 15,8 millions d'entr√©es, suivie par l'Auvergne Rhone Alpes et l'Occitanie.
√Ä l'inverse, les DROM et certaines r√©gions comme la Bourgogne-Franche-Comt√© affichent des volumes nettement plus faibles.
</div>
""", unsafe_allow_html=True)

st.divider()

# ------------------------------------
# 5. Biblioth√®ques + Population et Entr√©es par r√©gion
# ------------------------------------
st.subheader("5. üéüÔ∏è Comparatif √† 3 facteurs : Biblioth√®ques, population et fr√©quentation")

# 1) P√©rim√®tre commun : garder uniquement les lignes avec une valeur d'entr√©es
biblio_entries = biblio_file.copy()
biblio_entries['nombre_d_entrees'] = pd.to_numeric(
    biblio_entries['nombre_d_entrees'], errors='coerce'
)
biblio_entries = biblio_entries.dropna(subset=['nombre_d_entrees'])
biblio_entries['nombre_d_entrees'] = biblio_entries['nombre_d_entrees'].astype(int)
nb_lignes_utilisees = len(biblio_entries)

# 2) Agr√©gations sur ce m√™me p√©rim√®tre
#    - total d'entr√©es par r√©gion
region_entries = (
    biblio_entries.groupby('R√©gion', as_index=False)['nombre_d_entrees'].sum()
)

#    - nombre de biblioth√®ques (uniquement celles ayant des entr√©es renseign√©es)
region_biblio_count = (
    biblio_entries.groupby('R√©gion', as_index=False)
    .size()
    .rename(columns={'size': 'nb_bibliotheques'})
)

#    - population, restreinte aux r√©gions pr√©sentes dans le p√©rim√®tre
regions_avec_entrees = sorted(biblio_entries['R√©gion'].dropna().unique())
pop_counts = (
    population_file[population_file['nom_region'].isin(regions_avec_entrees)]
    .groupby('nom_region', as_index=False)['Total'].sum()
)

# 3) Fusion des trois jeux de donn√©es
df_merge_5 = (
    region_biblio_count
    .merge(region_entries, on='R√©gion', how='inner')
    .merge(pop_counts, left_on='R√©gion', right_on='nom_region', how='inner')
    .sort_values('R√©gion')
    .reset_index(drop=True)
)

# 4) Graphique √† deux axes
fig, ax1 = plt.subplots(figsize=(11, 5))
x = np.arange(len(df_merge_5['R√©gion']))

# Barres ‚Üí Nombre de biblioth√®ques (p√©rim√®tre "avec entr√©es")
bars_biblio = ax1.bar(
    x,
    df_merge_5['nb_bibliotheques'],
    color=pastel_colors[:len(df_merge_5)],
    edgecolor='black'
)
ax1.set_xlabel("R√©gions", fontsize=12, fontweight='bold')
ax1.set_ylabel("Nombre de biblioth√®ques", fontsize=12, fontweight='bold')
ax1.set_xticks(x)
ax1.set_xticklabels(df_merge_5['R√©gion'], rotation=45, fontsize=10)

for bar in bars_biblio:
    ax1.annotate(
        f'{int(bar.get_height())}',
        xy=(bar.get_x() + bar.get_width()/2, bar.get_height()),
        xytext=(0, 3),
        textcoords="offset points",
        ha='center', va='bottom', fontsize=9
    )

# Courbes ‚Üí Entr√©es & Population (sur le m√™me p√©rim√®tre)
ax2 = ax1.twinx()
ax2.plot(
    x, df_merge_5['nombre_d_entrees'] / 1_000_000,
    color='blue', marker='o', linewidth=2, markersize=6, label='Entr√©es (M)'
)
ax2.plot(
    x, df_merge_5['Total'] / 1_000_000,
    color='red', marker='s', linewidth=2, markersize=5, label='Population (M)'
)
ax2.set_ylabel("Valeurs en millions", fontsize=12, fontweight='bold')

# L√©gendes & style
ax1.legend(loc='upper left', fontsize=10)
ax2.legend(loc='upper right', fontsize=10)
ax1.spines['top'].set_visible(False)
ax2.spines['top'].set_visible(False)

# Affichage
col1, col2, col3 = st.columns([0.5, 9, 0.5])
with col2:
    st.pyplot(fig)

st.caption(
    f"Calcul r√©alis√© sur {nb_lignes_utilisees} lignes avec valeurs renseign√©es dans 'nombre_d_entrees' "
    f"(sur {len(biblio_file)} lignes initiales). Biblioth√®ques et population sont restreintes au m√™me p√©rim√®tre."
)

st.markdown("""
<div class="commentary-box">
L'Auvergne Rhone Alpes ressort avec le plus grand nombre de biblioth√®ques dans le p√©rim√®tre √©tudi√©, mais ce n'est pas forc√©ment la r√©gion la plus peupl√©e ni la plus fr√©quent√©e.
√Ä l'inverse, l'Ile de France, tr√®s peupl√©e et en t√™te en termes de fr√©quentation, compte proportionnellement moins de biblioth√®ques.
On voit aussi que certaines r√©gions comme les DROM combinent faible offre, faible population et faible fr√©quentation, tandis que d'autres comme l'Occitanie affichent une fr√©quentation importante avec un nombre de biblioth√®ques plus modeste.
</div>
""", unsafe_allow_html=True)

st.divider()

# ------------------------------------
# 6. üìÖ Ouvertes / Ferm√©es le dimanche : Nombre + Entr√©es (millions)
# ------------------------------------
st.subheader("6 üìÖ Ouvertes / Ferm√©es le dimanche : Nombre + Entr√©es (millions)")

# 1) P√©rim√®tre commun : uniquement les lignes avec une valeur d'entr√©es
df_dimanche_detail = biblio_file[['R√©gion', 'ouverture_le_dimanche', 'nombre_d_entrees']].copy()

# Normalisation du champ "ouverture_le_dimanche"
df_dimanche_detail['ouverture_le_dimanche'] = (
    df_dimanche_detail['ouverture_le_dimanche']
    .astype(str).str.strip().str.lower()
    .replace({'nan': np.nan})
    .replace({'oui': 'Oui', 'true': 'Oui', '1': 'Oui', 'o': 'Oui',
              'non': 'Non', 'false': 'Non', '0': 'Non', 'n': 'Non'})
)

# Conversion stricte + exclusion des lignes sans entr√©es
df_dimanche_detail['nombre_d_entrees'] = pd.to_numeric(
    df_dimanche_detail['nombre_d_entrees'], errors='coerce'
)
df_dimanche_detail = df_dimanche_detail.dropna(subset=['nombre_d_entrees'])
df_dimanche_detail['nombre_d_entrees'] = df_dimanche_detail['nombre_d_entrees'].astype(int)

# 2) L'ordre des r√©gions et la palette sont d√©finis SUR CE P√âRIM√àTRE
region_order = sorted(df_dimanche_detail['R√©gion'].dropna().unique())
color_map = dict(zip(region_order, pastel_colors[:len(region_order)]))
colors_ordered = [color_map[r] for r in region_order]

def plot_dimanche_vs_entrees(title, df_filtered):
    # Agr√©gations sur le p√©rim√®tre filtr√©
    total_bib = df_filtered.groupby('R√©gion').size().reindex(region_order, fill_value=0)
    total_entrees = df_filtered.groupby('R√©gion')['nombre_d_entrees'].sum().reindex(region_order, fill_value=0)

    # Figure
    fig, ax_left = plt.subplots(figsize=(10, 5))
    plt.subplots_adjust(bottom=0.2, left=0.08, right=0.88)

    # Barres : nombre de biblioth√®ques (p√©rim√®tre "avec entr√©es" uniquement)
    bars = ax_left.bar(region_order, total_bib.values,
                       color=colors_ordered, edgecolor='black', label="Nombre de biblioth√®ques")
    ax_left.set_xlabel("R√©gions", fontsize=12, fontweight='bold')
    ax_left.set_ylabel("Nombre de biblioth√®ques", fontsize=12, fontweight='bold')
    ax_left.tick_params(axis='x', rotation=45, labelsize=10)

    for b in bars:
        ax_left.annotate(f"{int(b.get_height())}",
                         (b.get_x() + b.get_width()/2, b.get_height()),
                         textcoords="offset points", xytext=(0,3),
                         ha="center", va="bottom", fontsize=8)

    # Courbe : entr√©es en millions (m√™me p√©rim√®tre)
    ax_right = ax_left.twinx()
    ax_right.plot(region_order, total_entrees / 1_000_000,
                  color='blue', marker='o', linewidth=1.5, label="Entr√©es (millions)")
    ax_right.set_ylabel("Entr√©es (millions)", fontsize=12, fontweight='bold')

    ax_left.legend(loc='upper left', fontsize=9)
    ax_right.legend(loc='upper right', fontsize=9)

    ax_left.spines['top'].set_visible(False)
    ax_right.spines['top'].set_visible(False)

    st.subheader(title)
    col1, col2, col3 = st.columns([1, 8, 1])
    with col2:
        st.pyplot(fig)

# 3) Graphique A : OUVERTES le dimanche (p√©rim√®tre avec entr√©es)
df_open = df_dimanche_detail[df_dimanche_detail['ouverture_le_dimanche'] == 'Oui']
plot_dimanche_vs_entrees("üëç 6.1 Biblioth√®ques ouvertes le dimanche : Nombre + Entr√©es", df_open)

st.markdown("""
<div class="commentary-box">
L'Ile de France, la Bretagne et l'Auvergne Rhone Alpes comptent le plus de biblioth√®ques ouvertes le dimanche, mais c'est l'Ile de France qui domine largement en nombre d'entr√©es, avec plus de 5 millions.
Certaines r√©gions comme les Pays de la Loire affichent une forte fr√©quentation malgr√© peu de biblioth√®ques ouvertes, tandis que d'autres, comme la Bourgogne-Franche-Comt√© ou le Centre-Val de Loire, combinent faible offre et faible fr√©quentation.
</div>
""", unsafe_allow_html=True)
st.write("")

# 4) Graphique B : FERM√âES le dimanche (p√©rim√®tre avec entr√©es)
df_closed = df_dimanche_detail[df_dimanche_detail['ouverture_le_dimanche'] == 'Non']
plot_dimanche_vs_entrees("üëé 6.2 Biblioth√®ques ferm√©es le dimanche : Nombre + Entr√©es", df_closed)

st.markdown("""
<div class="commentary-box">La majorit√© des biblioth√®ques sont ferm√©es le dimanche, notamment en Auvergne Rhone Alpes, Nouvelle-Aquitaine et Occitanie.
Malgr√© cette fermeture, certaines r√©gions comme l'Ile de France, la Nouvelle-Aquitaine et les Hauts-de-France enregistrent une fr√©quentation importante, ce qui montre que l'activit√© reste concentr√©e sur les autres jours de la semaine.
√Ä l'inverse, les DROM et le Centre-Val de Loire cumulent peu de biblioth√®ques et une faible fr√©quentation.
</div>
""", unsafe_allow_html=True)