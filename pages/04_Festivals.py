import streamlit as st
import streamlit as st
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
from plotly.subplots import make_subplots

# st.header('Festivals üíÉ')
# st.write()

# ------------------------------------
# Configuration de la page
# ------------------------------------
st.set_page_config(
    page_title="Festivals",
    page_icon="üíÉ",
    layout="wide"
)

# ------------------------------------
# Titre principal
# ------------------------------------
st.markdown(
    """
    <h1 style="text-align:center; margin-bottom: 0.3rem;">Festivals de France üíÉ</h1>
    <p style="text-align:center; font-size:1.1rem; color:#555;">
        Analyse et datavisualisation
    </p>
    """,
    unsafe_allow_html=True
)



df = pd.read_csv('data_prod/festivals_nettoye.csv', sep=';')
df=df[['R√©gion principale de d√©roulement']]
domtom = [
    "Guadeloupe",
    "Guyane",
    "La R√©union",
    "Martinique",
    "Mayotte",
    "Nouvelle-Cal√©donie",
    "Polyn√©sie fran√ßaise",
    "Saint-Barth√©lemy",
    "Saint-Pierre-et-Miquelon"
]
df['R√©gion principale de d√©roulement'] = df['R√©gion principale de d√©roulement'].replace(domtom, "Territoires et d√©partements d'outre-mer")
total_fest = len(df)  # nombre total de lignes
nb_regions = df['R√©gion principale de d√©roulement'].nunique()  # nombre de r√©gions uniques
moyenne_fest = total_fest / nb_regions  # moyenne par r√©gion
# --- Style CSS pour les cartes KPI ---
st.markdown("""
    <style>
    /* Conteneur des KPIs */
    [data-testid="stMetric"] {
        background-color: #f9f9f9;
        border: 1px solid #ddd;
        padding: 15px;
        border-radius: 10px;
        text-align: center;
        box-shadow: 1px 1px 3px rgba(0,0,0,0.05);
    }
    /* Label */
    [data-testid="stMetric"] label {
        font-size: 14px !important;
        color: #555;
    }
    /* Valeur */
    [data-testid="stMetric"] div {
        font-size: 24px !important;
        font-weight: bold;
        color: #222;
    }
    /* Zone de texte */
    .commentary-box {
        background-color: #f8f9fa;
        border-left: 4px solid #007ACC;
        padding: 15px;
        margin: 20px 0;
        border-radius: 5px;
        font-style: italic;
        color: #555;
    }
    </style>
""", unsafe_allow_html=True)
# --- Affichage en 3 colonnes ---
col1, col2, col3 = st.columns(3)
with col1:
    st.metric(label=":dancer: Total Festivals", value=f"{total_fest:,}".replace(",", " "))
with col2:
    st.metric(label=":earth_africa: Nombre de R√©gions", value=f"{nb_regions}")
with col3:
    st.metric(label=":heavy_division_sign: Moyenne par R√©gion", value=f"{moyenne_fest:.2f}")
st.divider()
# ------------------------------------
# Palette couleur globale
# ------------------------------------
pastel_colors = [
    
    "#312E60","#4D2A6C","#692678","#852284","#A01E90","#BC1A9C",
    "#D816A8","#F412B4","#FF1DA8","#FF339C","#FF4A90","#FF6084",
    "#FF7678","#FF8D6C","#FF0066"
]



df_festival = pd.read_csv('data_prod/festivals_nettoye.csv', sep =';')

domtom = [
    "Guadeloupe",
    "Guyane",
    "La R√©union",
    "Martinique",
    "Mayotte",
    "Nouvelle-Cal√©donie",
    "Polyn√©sie fran√ßaise",
    "Saint-Barth√©lemy",
    "Saint-Pierre-et-Miquelon"
]

df_festival['R√©gion principale de d√©roulement'] = df_festival['R√©gion principale de d√©roulement'].replace(domtom, "Territoires et d√©partements d'outre-mer")


# 1er graphe

df_plot = df_festival['Discipline dominante'].value_counts().reset_index()
df_plot.columns = ['Discipline dominante', 'Nombre de festivals']
st.title("R√©partition des types de festivals")

# Cr√©ation du camembert
fig = px.pie(
    df_plot,
    names='Discipline dominante',
    values='Nombre de festivals',
    # title="R√©partition des types de festivals",
    color_discrete_sequence=["#312E60", "#852284", "#D816A8", "#FF339C"]
)
fig.show()
st.plotly_chart(fig)



df_festival_reg = df_festival.groupby('R√©gion principale de d√©roulement').size().reset_index(name='Nombre de festivals')


#2eme graphe

st.title("Carte interactive des festivals en France")

# S√©parer les coordonn√©es
df_festival[['lat', 'lon']] = df_festival['G√©ocodage xy'].str.split(',', expand=True).astype(float)
df_festival['lat'] = pd.to_numeric(df_festival['lat'], errors='coerce')
df_festival['lon'] = pd.to_numeric(df_festival['lon'], errors='coerce')

# Suppression des lignes sans coordonn√©es valides
df_festival = df_festival.dropna(subset=['lat', 'lon'])

# Liste des r√©gions et choix utilisateur
regions = df_festival['R√©gion principale de d√©roulement'].dropna().unique()
choix_region = st.selectbox("Choisir une r√©gion", ["Toutes"] + sorted(regions.tolist()))

# Filtre sur les r√©gions

df_filtr√© = df_festival.copy()
if choix_region != "Toutes":
    df_filtr√© = df_filtr√©[df_filtr√©["R√©gion principale de d√©roulement"] == choix_region]

# Carte interactive
fig = px.scatter_map(
    df_filtr√©,
    lat='lat',
    lon='lon',
    hover_name='Nom du festival',
    hover_data=['R√©gion principale de d√©roulement', 'Discipline dominante'],
    color='Discipline dominante',
    color_discrete_sequence=["#312E60", "#852284", "#D816A8", '#3B82F6', '#6366F1', '#8B5CF6'],
    zoom=4,
    height=700
)

fig.update_layout(mapbox_style="open-street-map")
fig.update_layout(margin={"r":0,"t":0,"l":0,"b":0})

st.plotly_chart(fig, key="unique_key_1")


st.markdown("<br>", unsafe_allow_html=True)
st.markdown("<br>", unsafe_allow_html=True)

# 3eme graphe

# st.subheader(
#     "üéâ üçª üé∂ La vitalit√© culturelle des r√©gions fran√ßaises, √† la loupe")

st.title("üéâ üçª üé∂ La vitalit√© culturelle des r√©gions fran√ßaises, √† la loupe")

st.write("""Ce graphique montre le nombre de festivals pour un million d‚Äôhabitants dans chaque r√©gion de France. Cela permet de savoir o√π l‚Äôon trouve le plus de festivals en proportion de la population.""")

df_pop = pd.read_csv('data_prod/Population France par dpt 2024.csv', sep =';')
# Remove spaces and convert columns to integers
for col in ['Total Homme', 'Total Femme', 'Total']:
    df_pop[col] = df_pop[col].str.replace(' ', '').astype(int)

df_reg = pd.read_csv('data_prod/departements-regions-france.csv', sep =',')

df_pop_clean = pd.merge(df_pop, df_reg, left_on ='D√©partements', right_on = 'nom_departement')
df_pop_clean = df_pop_clean[['Code d√©partement','D√©partements','Total Homme', 'Total Femme', 'Total','code_region', 'nom_region']]
df_pop_reg_clean = df_pop_clean[['Total Homme', 'Total Femme', 'Total','code_region', 'nom_region']]
df_pop_reg_clean = df_pop_reg_clean.groupby('nom_region').sum().reset_index()

df = pd.merge(df_festival_reg, df_pop_reg_clean, left_on = 'R√©gion principale de d√©roulement' , right_on='nom_region')
df = df[['nom_region','Nombre de festivals', 'Total']]

#Calcul du ratio festival par million d'habitants

df['festivals_par_million'] = df['Nombre de festivals'] / (df['Total'] / 1_000_000)

#Trie d√©croissant de mon ratio
df_sorted = df.sort_values(by='festivals_par_million', ascending=False)

import plotly.express as px

# Trier les donn√©es pour affichage en barres horizontales
df_sorted = df.sort_values(by='festivals_par_million', ascending=False)

# D√©grad√© de couleurs personnalis√© (m√™mes tons que Matplotlib)
colors = [
    "#0F0E23", "#1C1A3C", "#2B2760", "#312E60", "#443F77", "#5A4E8A", "#70549D",
    "#8C66AE", "#A878BE", "#C28ACD", "#D89BD9", "#E7ADD8", "#F3C0E1", "#FCD3EC"
]
fig = px.bar(
    df_sorted,
    x='festivals_par_million',
    y='nom_region',
    orientation='h',
    color='nom_region',
    color_discrete_sequence=colors,
    labels={'festivals_par_million': 'Festivals par million d\'habitants', 'nom_region': 'R√©gion'},
    title='üéâ Ratio festivals / population par r√©gion'
)

fig.update_layout(
    height=700,
    xaxis_title='Festivals par million d\'habitants',
    yaxis_title='',
    showlegend=False,
    margin=dict(l=100, r=40, t=80, b=40)
)

st.plotly_chart(fig, use_container_width=True)


# 4eme graphe

# 1. Remplacer les valeurs manquantes par une valeur standard
df_festival['P√©riode principale de d√©roulement du festival'] = df_festival['P√©riode principale de d√©roulement du festival'].fillna('Inconnue')

# 2. Uniformiser casse et espaces
df_festival['P√©riode principale de d√©roulement du festival'] = df_festival['P√©riode principale de d√©roulement du festival'].str.lower().str.strip()

# 3. Corriger fautes de frappe
df_festival['P√©riode principale de d√©roulement du festival'] = df_festival['P√©riode principale de d√©roulement du festival'].replace({'ocotbre': 'octobre', 'variable selon les ann√©es' : 'variable','p√©riode variable selon les territoires' : 'variable'})
df_festival['P√©riode principale de d√©roulement du festival'].unique()

# Supposons que ton dataframe s'appelle df et la colonne s'appelle 'saisonnalit√©'

def saison_group(val):
    val = str(val).lower().strip()
    
    if 'avant-saison' in val:
        return 'printemps'
    elif 'apr√®s-saison' in val:
        return 'automne'
    elif val.startswith('saison') or 'juin' in val or 'juillet' in val or 'ao√ªt' in val:
        return '√©t√©'
    elif 'janvier' in val or 'f√©vrier' in val or 'mars' in val or 'avril' in val or 'mai' in val:
        return 'printemps'
    elif 'septembre' in val or 'octobre' in val or 'novembre' in val:
        return 'automne'
    elif 'd√©cembre' in val:
        return 'hiver'
    else:
        return 'autre'

df_festival['saison_group'] = df_festival['P√©riode principale de d√©roulement du festival'].apply(saison_group)
#df_festival['saison_group'].unique()

#Groupement par region et saison

df_grouped = df_festival.groupby(['R√©gion principale de d√©roulement', 'saison_group']).size().reset_index(name='Nombre de festivals')

# Supprimer la saison "autre"
df_grouped = df_grouped[df_grouped['saison_group'] != 'autre']

# Compter le nombre de festivals par saison
saison_counts = df_festival['saison_group'].value_counts().reset_index()
saison_counts.columns = ['Saison', 'Nombre de festivals']

# Titre
# st.subheader("üìä R√©partition des festivals par saison")
st.title("üìä R√©partition des festivals par saison")

fig = px.bar(
    df_grouped,
    x='R√©gion principale de d√©roulement',
    y='Nombre de festivals',
    color='saison_group',
    color_discrete_sequence=["#312E60", "#852284", "#D816A8", '#3B82F6'],
    title='R√©partition des festivals par saison et par r√©gion',
    barmode='group',

)

fig.update_layout(xaxis_tickangle=-45)
fig.show()
# Affichage
st.plotly_chart(fig)

#a commenter