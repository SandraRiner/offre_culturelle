#import des diff√©rentes biblioth√®ques n√©cessaires
import streamlit as st
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots

#Mise en forme de la page
st.header('Cin√©ma üé¶')

#Introduction
st.write('Il y a 4 r√©gions en France qui se d√©marquent dans l\'offre cin√©matographique : ')

#Lecture des documents
df = pd.read_csv('data/frequentation-dans-les-salles-de-cinema.csv', sep=';')
df1 = pd.read_csv('data/cinema_clean.csv', sep=';')
df2 = pd.read_csv('data/code_departement_region.csv', sep=';')
pop= pd.read_csv('data/poulation France par dpt et region_clean.csv', sep=';')
cine_reg = pd.read_csv('data/cinema_par_region.csv', sep=';')
cine = pd.read_csv('data/cinema_par_region.csv',sep=';')
freq_cine= pd.read_csv('data/frequentation cinemas par region.csv', sep=';')
cine_reg = pd.read_csv('data/cinema_par_region.csv', sep=';')

# #Graphique num√©ro 1
# #Jointure pour avoir les cin√©mas par r√©gion
# df_merge = pd.merge(df1, df2, left_on ='code_departement', right_on='num_dep')
# #Conserver les colonnes utiles
# df3 = df_merge[['Nom_cinema', 'num_dep', 'dep_name', 'region_name']]

# # Compter le nombre de cin√©mas par r√©gion
# cinemas_par_region = df3.groupby('region_name')['Nom_cinema'].count().sort_values()

# # Afficher le graphique
# cinemas_par_region.plot(kind='barh', figsize=(10,6), color='skyblue')
# plt.title("Nombre de cin√©mas par r√©gion")
# plt.xlabel("Nombre de cin√©mas")
# plt.ylabel("R√©gion")
# plt.show()
# st.pyplot(plt)



# Cr√©er le DataFrame
data = cine

df = pd.DataFrame(data)
df = df.sort_values('Nom_cinema', ascending=False)

# Cr√©er le treemap interactif avec style personnalis√©
fig = px.treemap(
    df,
    path=['region_name'],
    values='Nom_cinema',
    title="üé¨ Treemap Interactif - Cin√©mas par R√©gion üé¨",
    hover_data={'Nom_cinema': ':,'}
)

# Appliquer le d√©grad√© bleu marine -> rose fuchsia
import plotly.graph_objects as go

fig.update_traces(
    texttemplate="<b>%{label}</b><br>‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ<br>%{value} cin√©mas",
    textfont_size=13,
    textfont_color="white",
    textfont_family="Arial Black",
    hovertemplate="<b>%{label}</b><br>" +
                  "Nombre de cin√©mas: %{value}<br>" +
                  "Pourcentage: %{percentParent}<br>" +
                  "<extra></extra>",
    marker_colors=None  # On va d√©finir les couleurs manuellement
)

# D√©finir les couleurs personnalis√©es pour le d√©grad√©
custom_colors = ['#0B1426', '#1E3A8A', '#3B82F6', '#6366F1', '#8B5CF6', 
                '#A855F7', '#C084FC', '#E879F9', '#EC4899', '#F012BE', 
                '#FF1493', '#FF69B4', '#FFB6C1']

# Appliquer les couleurs
fig.update_traces(
    marker_colorscale=[[i/(len(custom_colors)-1), color] for i, color in enumerate(custom_colors)],
    marker_cmid=df['Nom_cinema'].mean()
)

fig.update_layout(
    title_font_size=15,
    title_x=0.5,
    title_font_color="black",
    title_font_family="Arial Black",
    margin=dict(t=80, l=25, r=25, b=25),
    font_size=14,
    plot_bgcolor="#FFFFFF",
    paper_bgcolor="#FFFFFF",
    annotations=[
        dict(
            text=f"Total: {df['Nom_cinema'].sum()} cin√©mas | Moyenne: {df['Nom_cinema'].mean():.0f} par r√©gion",
            showarrow=False,
            x=0.5, y=0.02,
            xref="paper", yref="paper",
            xanchor="center", yanchor="bottom",
            font=dict(size=12, color="lightgray", style="italic")
        )
    ]
)

fig.show()
st.plotly_chart(fig)

#Graphique num√©ro 2
#Jointure graph
pop_merge = pd.merge(cine_reg, freq_cine, left_on ='region_name', right_on='region', how='left')


pop_merge= pop_merge[['region', 'Nom_cinema', '2023']]

pop_merge = pop_merge.groupby('region', as_index=False).agg({
    '2023': 'sum',
    'Nom_cinema': 'first',  # ou 'count', 'max', etc.
    'region': 'first'
})

pop_merge = pop_merge.iloc[:, :3]
pop_merge.columns = ['frequentation_2023', 'nombre_cinemas', 'region']
pop_merge = pop_merge[['region', 'nombre_cinemas', 'frequentation_2023']]

pop_merge = pop_merge.sort_values(by='nombre_cinemas', ascending=False)

pop_merge['region'] = pop_merge['region'].str.title()

# Cr√©ation du graphique avec deux axes Y
fig = make_subplots(specs=[[{"secondary_y": True}]])

# Ajout des barres pour le nombre de cin√©mas (axe GAUCHE)
fig.add_trace(
    go.Bar(
        x=pop_merge['region'],
        y=pop_merge['nombre_cinemas'],  # ou le nom de votre colonne cin√©mas
        name="Nombre de cin√©mas",
        marker_color='#312E60',  # Bleu
        offsetgroup=1,  # Important pour s√©parer les barres
        width=0.4       # Largeur des barres
    ),
    secondary_y=False  # Axe GAUCHE
)

# Ajout des barres pour la fr√©quentation (axe DROITE)
fig.add_trace(
    go.Bar(
        x=pop_merge['region'],
        y=pop_merge['frequentation_2023'],  # ou le nom de votre colonne fr√©quentation
        name="Fr√©quentation (millions)",
        marker_color='#FF0066',  # Vert
        offsetgroup=2,  # Important pour s√©parer les barres
        width=0.4       # Largeur des barres
    ),
    secondary_y=True   # Axe DROITE
)

# Configuration de l'axe X
fig.update_xaxes(
    tickangle=-45
)

# Configuration de l'axe Y GAUCHE (cin√©mas)
fig.update_yaxes(
    title_text="Nombre de cin√©mas",
    title_font=dict(color="#312E60"),  # Couleur du titre
    tickfont=dict(color="#312E60"),    # Couleur des valeurs
    secondary_y=False
)

# Configuration de l'axe Y DROITE (fr√©quentation)
fig.update_yaxes(
    title_text="Fr√©quentation (millions d'entr√©es)",
    title_font=dict(color="#FF0066"),  # Couleur du titre
    tickfont=dict(color="#FF0066"),    # Couleur des valeurs
    secondary_y=True
)

# Configuration g√©n√©rale
fig.update_layout(
    title="Cin√©mas et Fr√©quentation par R√©gion - 2023",
    height=600,
    barmode='group',  # Barres group√©es
    legend=dict(
        orientation="h",
        yanchor="bottom",
        y=1.02,
        xanchor="right",
        x=1
    ),
    margin=dict(b=150, l=80, r=80)  # Marges pour les axes
)

st.plotly_chart(fig, use_container_width=True)


#Graphique num√©ro 3
#Introduction du graphe
st.write('La fr√©quentation des salles de cin√©ma a connu une diminution drastique en 2020 en raison de la pand√©mie de COVID-19.')

# Remplacer les virgules par des points et convertir en float
df["Entr√©es (millions)"] = df["Entr√©es (millions)"].str.replace(",", ".").astype(float)
df["Recette moyenne par entr√©e (‚Ç¨)"] = df["Recette moyenne par entr√©e (‚Ç¨)"].str.replace(",", ".").astype(float)

# Filtrer et trier les 10 derni√®res ann√©es
df_filtered = df[df["Ann√©e"] >= 2015].sort_values("Ann√©e")

# Cr√©er la figure
fig = go.Figure()

# Barres : Entr√©es (millions)
fig.add_trace(go.Bar(
    x=df_filtered["Ann√©e"],
    y=df_filtered["Entr√©es (millions)"],
    name="Entr√©es (millions)",
    yaxis="y1",
    marker_color="skyblue"
))

# Courbe : Prix moyen (‚Ç¨)
fig.add_trace(go.Scatter(
    x=df_filtered["Ann√©e"],
    y=df_filtered["Recette moyenne par entr√©e (‚Ç¨)"],
    name="Prix moyen (‚Ç¨)",
    yaxis="y2",
    mode="lines+markers",
    line=dict(color="#F4B183", width=3)
))

# Mise en page
fig.update_layout(
    title="Fr√©quentation vs Prix moyen du billet (2015‚Äì2024)",
    xaxis=dict(title="Ann√©e", type="category"),  # affichage lisible
    yaxis=dict(
        title=dict(text="Entr√©es (millions)", font=dict(color="royalblue")),
        tickfont=dict(color="royalblue")
    ),
    yaxis2=dict(
        title=dict(text="Prix moyen (‚Ç¨)", font=dict(color="orange")),
        tickfont=dict(color="orange"),
        overlaying="y",
        side="right"
    ),
    legend=dict(x=0.01, y=0.99),
    bargap=0.2
)
st.plotly_chart(fig)

#Explication du graph
st.write('Afin de mieux comprendre l\'√©volution de la fr√©quentation nous avons ajout√© le prix moyen du ticket de cin√©ma par ann√©e.')
st.write('Nous constatons que l\'augmentation du prix du ticket n\'induit pas une baisse de la fr√©quentation.')